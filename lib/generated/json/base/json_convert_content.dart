// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:music/models/automation/song_list_res_entity.dart';
import 'package:music/generated/json/song_list_res_entity_helper.dart';
import 'package:music/models/automation/personalized_response_entity.dart';
import 'package:music/generated/json/personalized_response_entity_helper.dart';
import 'package:music/models/automation/personalized_newsong_entity.dart';
import 'package:music/generated/json/personalized_newsong_entity_helper.dart';
import 'package:music/models/automation/mv_detail_entity.dart';
import 'package:music/generated/json/mv_detail_entity_helper.dart';
import 'package:music/models/automation/tag_response_entity.dart';
import 'package:music/generated/json/tag_response_entity_helper.dart';
import 'package:music/models/automation/dj_program_entity.dart';
import 'package:music/generated/json/dj_program_entity_helper.dart';
import 'package:music/models/automation/search_song_list_entity.dart';
import 'package:music/generated/json/search_song_list_entity_helper.dart';
import 'package:music/models/automation/fine_list_response_entity.dart';
import 'package:music/generated/json/fine_list_response_entity_helper.dart';
import 'package:music/models/automation/personalized_privatecontent_entity.dart';
import 'package:music/generated/json/personalized_privatecontent_entity_helper.dart';
import 'package:music/models/automation/fine_song_list_response_entity.dart';
import 'package:music/generated/json/fine_song_list_response_entity_helper.dart';
import 'package:music/models/automation/dj_hot_entity.dart';
import 'package:music/generated/json/dj_hot_entity_helper.dart';
import 'package:music/models/automation/dj_detail_entity.dart';
import 'package:music/generated/json/dj_detail_entity_helper.dart';
import 'package:music/models/automation/top_mv_entity.dart';
import 'package:music/generated/json/top_mv_entity_helper.dart';
import 'package:music/models/automation/search_entity.dart';
import 'package:music/generated/json/search_entity_helper.dart';
import 'package:music/models/automation/playlist_detail_response_entity.dart';
import 'package:music/generated/json/playlist_detail_response_entity_helper.dart';
import 'package:music/models/automation/mv_url_entity.dart';
import 'package:music/generated/json/mv_url_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case SongListResEntity:
				return songListResEntityFromJson(data as SongListResEntity, json) as T;
			case SongListResPlaylists:
				return songListResPlaylistsFromJson(data as SongListResPlaylists, json) as T;
			case SongListResPlaylistsCreator:
				return songListResPlaylistsCreatorFromJson(data as SongListResPlaylistsCreator, json) as T;
			case SongListResPlaylistsCreatorAvatarDetail:
				return songListResPlaylistsCreatorAvatarDetailFromJson(data as SongListResPlaylistsCreatorAvatarDetail, json) as T;
			case SongListResPlaylistsSubscribers:
				return songListResPlaylistsSubscribersFromJson(data as SongListResPlaylistsSubscribers, json) as T;
			case PersonalizedResponseEntity:
				return personalizedResponseEntityFromJson(data as PersonalizedResponseEntity, json) as T;
			case PersonalizedResponseResult:
				return personalizedResponseResultFromJson(data as PersonalizedResponseResult, json) as T;
			case PersonalizedNewsongEntity:
				return personalizedNewsongEntityFromJson(data as PersonalizedNewsongEntity, json) as T;
			case PersonalizedNewsongResult:
				return personalizedNewsongResultFromJson(data as PersonalizedNewsongResult, json) as T;
			case PersonalizedNewsongResultSong:
				return personalizedNewsongResultSongFromJson(data as PersonalizedNewsongResultSong, json) as T;
			case PersonalizedNewsongResultSongArtists:
				return personalizedNewsongResultSongArtistsFromJson(data as PersonalizedNewsongResultSongArtists, json) as T;
			case PersonalizedNewsongResultSongAlbum:
				return personalizedNewsongResultSongAlbumFromJson(data as PersonalizedNewsongResultSongAlbum, json) as T;
			case PersonalizedNewsongResultSongAlbumArtist:
				return personalizedNewsongResultSongAlbumArtistFromJson(data as PersonalizedNewsongResultSongAlbumArtist, json) as T;
			case PersonalizedNewsongResultSongAlbumArtists:
				return personalizedNewsongResultSongAlbumArtistsFromJson(data as PersonalizedNewsongResultSongAlbumArtists, json) as T;
			case PersonalizedNewsongResultSongBMusic:
				return personalizedNewsongResultSongBMusicFromJson(data as PersonalizedNewsongResultSongBMusic, json) as T;
			case PersonalizedNewsongResultSongHMusic:
				return personalizedNewsongResultSongHMusicFromJson(data as PersonalizedNewsongResultSongHMusic, json) as T;
			case PersonalizedNewsongResultSongMMusic:
				return personalizedNewsongResultSongMMusicFromJson(data as PersonalizedNewsongResultSongMMusic, json) as T;
			case PersonalizedNewsongResultSongLMusic:
				return personalizedNewsongResultSongLMusicFromJson(data as PersonalizedNewsongResultSongLMusic, json) as T;
			case PersonalizedNewsongResultSongPrivilege:
				return personalizedNewsongResultSongPrivilegeFromJson(data as PersonalizedNewsongResultSongPrivilege, json) as T;
			case PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege:
				return personalizedNewsongResultSongPrivilegeFreeTrialPrivilegeFromJson(data as PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege, json) as T;
			case PersonalizedNewsongResultSongPrivilegeChargeInfoList:
				return personalizedNewsongResultSongPrivilegeChargeInfoListFromJson(data as PersonalizedNewsongResultSongPrivilegeChargeInfoList, json) as T;
			case MvDetailEntity:
				return mvDetailEntityFromJson(data as MvDetailEntity, json) as T;
			case MvDetailMp:
				return mvDetailMpFromJson(data as MvDetailMp, json) as T;
			case MvDetailData:
				return mvDetailDataFromJson(data as MvDetailData, json) as T;
			case MvDetailDataBrs:
				return mvDetailDataBrsFromJson(data as MvDetailDataBrs, json) as T;
			case MvDetailDataArtists:
				return mvDetailDataArtistsFromJson(data as MvDetailDataArtists, json) as T;
			case TagResponseEntity:
				return tagResponseEntityFromJson(data as TagResponseEntity, json) as T;
			case TagResponseTags:
				return tagResponseTagsFromJson(data as TagResponseTags, json) as T;
			case TagResponseTagsPlaylistTag:
				return tagResponseTagsPlaylistTagFromJson(data as TagResponseTagsPlaylistTag, json) as T;
			case DjProgramEntity:
				return djProgramEntityFromJson(data as DjProgramEntity, json) as T;
			case DjProgramPrograms:
				return djProgramProgramsFromJson(data as DjProgramPrograms, json) as T;
			case DjProgramProgramsMainSong:
				return djProgramProgramsMainSongFromJson(data as DjProgramProgramsMainSong, json) as T;
			case DjProgramProgramsMainSongArtists:
				return djProgramProgramsMainSongArtistsFromJson(data as DjProgramProgramsMainSongArtists, json) as T;
			case DjProgramProgramsMainSongAlbum:
				return djProgramProgramsMainSongAlbumFromJson(data as DjProgramProgramsMainSongAlbum, json) as T;
			case DjProgramProgramsMainSongAlbumArtist:
				return djProgramProgramsMainSongAlbumArtistFromJson(data as DjProgramProgramsMainSongAlbumArtist, json) as T;
			case DjProgramProgramsMainSongAlbumArtists:
				return djProgramProgramsMainSongAlbumArtistsFromJson(data as DjProgramProgramsMainSongAlbumArtists, json) as T;
			case DjProgramProgramsMainSongBMusic:
				return djProgramProgramsMainSongBMusicFromJson(data as DjProgramProgramsMainSongBMusic, json) as T;
			case DjProgramProgramsMainSongHMusic:
				return djProgramProgramsMainSongHMusicFromJson(data as DjProgramProgramsMainSongHMusic, json) as T;
			case DjProgramProgramsMainSongLMusic:
				return djProgramProgramsMainSongLMusicFromJson(data as DjProgramProgramsMainSongLMusic, json) as T;
			case DjProgramProgramsDj:
				return djProgramProgramsDjFromJson(data as DjProgramProgramsDj, json) as T;
			case DjProgramProgramsRadio:
				return djProgramProgramsRadioFromJson(data as DjProgramProgramsRadio, json) as T;
			case SearchSongListEntity:
				return searchSongListEntityFromJson(data as SearchSongListEntity, json) as T;
			case SearchSongListResult:
				return searchSongListResultFromJson(data as SearchSongListResult, json) as T;
			case SearchSongListResultPlaylists:
				return searchSongListResultPlaylistsFromJson(data as SearchSongListResultPlaylists, json) as T;
			case SearchSongListResultPlaylistsCreator:
				return searchSongListResultPlaylistsCreatorFromJson(data as SearchSongListResultPlaylistsCreator, json) as T;
			case SearchSongListResultPlaylistsTrack:
				return searchSongListResultPlaylistsTrackFromJson(data as SearchSongListResultPlaylistsTrack, json) as T;
			case SearchSongListResultPlaylistsTrackArtists:
				return searchSongListResultPlaylistsTrackArtistsFromJson(data as SearchSongListResultPlaylistsTrackArtists, json) as T;
			case SearchSongListResultPlaylistsTrackAlbum:
				return searchSongListResultPlaylistsTrackAlbumFromJson(data as SearchSongListResultPlaylistsTrackAlbum, json) as T;
			case SearchSongListResultPlaylistsTrackAlbumArtist:
				return searchSongListResultPlaylistsTrackAlbumArtistFromJson(data as SearchSongListResultPlaylistsTrackAlbumArtist, json) as T;
			case SearchSongListResultPlaylistsTrackAlbumArtists:
				return searchSongListResultPlaylistsTrackAlbumArtistsFromJson(data as SearchSongListResultPlaylistsTrackAlbumArtists, json) as T;
			case SearchSongListResultPlaylistsTrackHMusic:
				return searchSongListResultPlaylistsTrackHMusicFromJson(data as SearchSongListResultPlaylistsTrackHMusic, json) as T;
			case SearchSongListResultPlaylistsTrackMMusic:
				return searchSongListResultPlaylistsTrackMMusicFromJson(data as SearchSongListResultPlaylistsTrackMMusic, json) as T;
			case SearchSongListResultPlaylistsTrackLMusic:
				return searchSongListResultPlaylistsTrackLMusicFromJson(data as SearchSongListResultPlaylistsTrackLMusic, json) as T;
			case SearchSongListResultPlaylistsTrackBMusic:
				return searchSongListResultPlaylistsTrackBMusicFromJson(data as SearchSongListResultPlaylistsTrackBMusic, json) as T;
			case FineListResponseEntity:
				return fineListResponseEntityFromJson(data as FineListResponseEntity, json) as T;
			case FineListResponsePlaylists:
				return fineListResponsePlaylistsFromJson(data as FineListResponsePlaylists, json) as T;
			case FineListResponsePlaylistsCreator:
				return fineListResponsePlaylistsCreatorFromJson(data as FineListResponsePlaylistsCreator, json) as T;
			case FineListResponsePlaylistsCreatorAvatarDetail:
				return fineListResponsePlaylistsCreatorAvatarDetailFromJson(data as FineListResponsePlaylistsCreatorAvatarDetail, json) as T;
			case FineListResponsePlaylistsSubscribers:
				return fineListResponsePlaylistsSubscribersFromJson(data as FineListResponsePlaylistsSubscribers, json) as T;
			case PersonalizedPrivatecontentEntity:
				return personalizedPrivatecontentEntityFromJson(data as PersonalizedPrivatecontentEntity, json) as T;
			case PersonalizedPrivatecontentResult:
				return personalizedPrivatecontentResultFromJson(data as PersonalizedPrivatecontentResult, json) as T;
			case FineSongListResponseEntity:
				return fineSongListResponseEntityFromJson(data as FineSongListResponseEntity, json) as T;
			case FineSongListResponsePlaylists:
				return fineSongListResponsePlaylistsFromJson(data as FineSongListResponsePlaylists, json) as T;
			case FineSongListResponsePlaylistsCreator:
				return fineSongListResponsePlaylistsCreatorFromJson(data as FineSongListResponsePlaylistsCreator, json) as T;
			case FineSongListResponsePlaylistsCreatorAvatarDetail:
				return fineSongListResponsePlaylistsCreatorAvatarDetailFromJson(data as FineSongListResponsePlaylistsCreatorAvatarDetail, json) as T;
			case FineSongListResponsePlaylistsSubscribers:
				return fineSongListResponsePlaylistsSubscribersFromJson(data as FineSongListResponsePlaylistsSubscribers, json) as T;
			case DjHotEntity:
				return djHotEntityFromJson(data as DjHotEntity, json) as T;
			case DjHotDjRadios:
				return djHotDjRadiosFromJson(data as DjHotDjRadios, json) as T;
			case DjHotDjRadiosDj:
				return djHotDjRadiosDjFromJson(data as DjHotDjRadiosDj, json) as T;
			case DjDetailEntity:
				return djDetailEntityFromJson(data as DjDetailEntity, json) as T;
			case DjDetailData:
				return djDetailDataFromJson(data as DjDetailData, json) as T;
			case DjDetailDataDj:
				return djDetailDataDjFromJson(data as DjDetailDataDj, json) as T;
			case DjDetailDataCommentDatas:
				return djDetailDataCommentDatasFromJson(data as DjDetailDataCommentDatas, json) as T;
			case DjDetailDataCommentDatasUserProfile:
				return djDetailDataCommentDatasUserProfileFromJson(data as DjDetailDataCommentDatasUserProfile, json) as T;
			case TopMvEntity:
				return topMvEntityFromJson(data as TopMvEntity, json) as T;
			case TopMvData:
				return topMvDataFromJson(data as TopMvData, json) as T;
			case TopMvDataMv:
				return topMvDataMvFromJson(data as TopMvDataMv, json) as T;
			case TopMvDataMvArtists:
				return topMvDataMvArtistsFromJson(data as TopMvDataMvArtists, json) as T;
			case TopMvDataMvVideos:
				return topMvDataMvVideosFromJson(data as TopMvDataMvVideos, json) as T;
			case TopMvDataMvVideosTagSign:
				return topMvDataMvVideosTagSignFromJson(data as TopMvDataMvVideosTagSign, json) as T;
			case TopMvDataArtists:
				return topMvDataArtistsFromJson(data as TopMvDataArtists, json) as T;
			case SearchEntity:
				return searchEntityFromJson(data as SearchEntity, json) as T;
			case SearchResult:
				return searchResultFromJson(data as SearchResult, json) as T;
			case SearchResultSongs:
				return searchResultSongsFromJson(data as SearchResultSongs, json) as T;
			case SearchResultSongsArtists:
				return searchResultSongsArtistsFromJson(data as SearchResultSongsArtists, json) as T;
			case SearchResultSongsAlbum:
				return searchResultSongsAlbumFromJson(data as SearchResultSongsAlbum, json) as T;
			case SearchResultSongsAlbumArtist:
				return searchResultSongsAlbumArtistFromJson(data as SearchResultSongsAlbumArtist, json) as T;
			case PlaylistDetailResponseEntity:
				return playlistDetailResponseEntityFromJson(data as PlaylistDetailResponseEntity, json) as T;
			case PlaylistDetailResponsePlaylist:
				return playlistDetailResponsePlaylistFromJson(data as PlaylistDetailResponsePlaylist, json) as T;
			case PlaylistDetailResponsePlaylistSubscribers:
				return playlistDetailResponsePlaylistSubscribersFromJson(data as PlaylistDetailResponsePlaylistSubscribers, json) as T;
			case PlaylistDetailResponsePlaylistCreator:
				return playlistDetailResponsePlaylistCreatorFromJson(data as PlaylistDetailResponsePlaylistCreator, json) as T;
			case PlaylistDetailResponsePlaylistCreatorAvatarDetail:
				return playlistDetailResponsePlaylistCreatorAvatarDetailFromJson(data as PlaylistDetailResponsePlaylistCreatorAvatarDetail, json) as T;
			case PlaylistDetailResponsePlaylistTracks:
				return playlistDetailResponsePlaylistTracksFromJson(data as PlaylistDetailResponsePlaylistTracks, json) as T;
			case PlaylistDetailResponsePlaylistTracksAr:
				return playlistDetailResponsePlaylistTracksArFromJson(data as PlaylistDetailResponsePlaylistTracksAr, json) as T;
			case PlaylistDetailResponsePlaylistTracksAl:
				return playlistDetailResponsePlaylistTracksAlFromJson(data as PlaylistDetailResponsePlaylistTracksAl, json) as T;
			case PlaylistDetailResponsePlaylistTracksH:
				return playlistDetailResponsePlaylistTracksHFromJson(data as PlaylistDetailResponsePlaylistTracksH, json) as T;
			case PlaylistDetailResponsePlaylistTracksM:
				return playlistDetailResponsePlaylistTracksMFromJson(data as PlaylistDetailResponsePlaylistTracksM, json) as T;
			case PlaylistDetailResponsePlaylistTracksL:
				return playlistDetailResponsePlaylistTracksLFromJson(data as PlaylistDetailResponsePlaylistTracksL, json) as T;
			case PlaylistDetailResponsePlaylistTrackIds:
				return playlistDetailResponsePlaylistTrackIdsFromJson(data as PlaylistDetailResponsePlaylistTrackIds, json) as T;
			case PlaylistDetailResponsePrivileges:
				return playlistDetailResponsePrivilegesFromJson(data as PlaylistDetailResponsePrivileges, json) as T;
			case PlaylistDetailResponsePrivilegesFreeTrialPrivilege:
				return playlistDetailResponsePrivilegesFreeTrialPrivilegeFromJson(data as PlaylistDetailResponsePrivilegesFreeTrialPrivilege, json) as T;
			case PlaylistDetailResponsePrivilegesChargeInfoList:
				return playlistDetailResponsePrivilegesChargeInfoListFromJson(data as PlaylistDetailResponsePrivilegesChargeInfoList, json) as T;
			case MvUrlEntity:
				return mvUrlEntityFromJson(data as MvUrlEntity, json) as T;
			case MvUrlData:
				return mvUrlDataFromJson(data as MvUrlData, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case SongListResEntity:
				return songListResEntityToJson(data as SongListResEntity);
			case SongListResPlaylists:
				return songListResPlaylistsToJson(data as SongListResPlaylists);
			case SongListResPlaylistsCreator:
				return songListResPlaylistsCreatorToJson(data as SongListResPlaylistsCreator);
			case SongListResPlaylistsCreatorAvatarDetail:
				return songListResPlaylistsCreatorAvatarDetailToJson(data as SongListResPlaylistsCreatorAvatarDetail);
			case SongListResPlaylistsSubscribers:
				return songListResPlaylistsSubscribersToJson(data as SongListResPlaylistsSubscribers);
			case PersonalizedResponseEntity:
				return personalizedResponseEntityToJson(data as PersonalizedResponseEntity);
			case PersonalizedResponseResult:
				return personalizedResponseResultToJson(data as PersonalizedResponseResult);
			case PersonalizedNewsongEntity:
				return personalizedNewsongEntityToJson(data as PersonalizedNewsongEntity);
			case PersonalizedNewsongResult:
				return personalizedNewsongResultToJson(data as PersonalizedNewsongResult);
			case PersonalizedNewsongResultSong:
				return personalizedNewsongResultSongToJson(data as PersonalizedNewsongResultSong);
			case PersonalizedNewsongResultSongArtists:
				return personalizedNewsongResultSongArtistsToJson(data as PersonalizedNewsongResultSongArtists);
			case PersonalizedNewsongResultSongAlbum:
				return personalizedNewsongResultSongAlbumToJson(data as PersonalizedNewsongResultSongAlbum);
			case PersonalizedNewsongResultSongAlbumArtist:
				return personalizedNewsongResultSongAlbumArtistToJson(data as PersonalizedNewsongResultSongAlbumArtist);
			case PersonalizedNewsongResultSongAlbumArtists:
				return personalizedNewsongResultSongAlbumArtistsToJson(data as PersonalizedNewsongResultSongAlbumArtists);
			case PersonalizedNewsongResultSongBMusic:
				return personalizedNewsongResultSongBMusicToJson(data as PersonalizedNewsongResultSongBMusic);
			case PersonalizedNewsongResultSongHMusic:
				return personalizedNewsongResultSongHMusicToJson(data as PersonalizedNewsongResultSongHMusic);
			case PersonalizedNewsongResultSongMMusic:
				return personalizedNewsongResultSongMMusicToJson(data as PersonalizedNewsongResultSongMMusic);
			case PersonalizedNewsongResultSongLMusic:
				return personalizedNewsongResultSongLMusicToJson(data as PersonalizedNewsongResultSongLMusic);
			case PersonalizedNewsongResultSongPrivilege:
				return personalizedNewsongResultSongPrivilegeToJson(data as PersonalizedNewsongResultSongPrivilege);
			case PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege:
				return personalizedNewsongResultSongPrivilegeFreeTrialPrivilegeToJson(data as PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege);
			case PersonalizedNewsongResultSongPrivilegeChargeInfoList:
				return personalizedNewsongResultSongPrivilegeChargeInfoListToJson(data as PersonalizedNewsongResultSongPrivilegeChargeInfoList);
			case MvDetailEntity:
				return mvDetailEntityToJson(data as MvDetailEntity);
			case MvDetailMp:
				return mvDetailMpToJson(data as MvDetailMp);
			case MvDetailData:
				return mvDetailDataToJson(data as MvDetailData);
			case MvDetailDataBrs:
				return mvDetailDataBrsToJson(data as MvDetailDataBrs);
			case MvDetailDataArtists:
				return mvDetailDataArtistsToJson(data as MvDetailDataArtists);
			case TagResponseEntity:
				return tagResponseEntityToJson(data as TagResponseEntity);
			case TagResponseTags:
				return tagResponseTagsToJson(data as TagResponseTags);
			case TagResponseTagsPlaylistTag:
				return tagResponseTagsPlaylistTagToJson(data as TagResponseTagsPlaylistTag);
			case DjProgramEntity:
				return djProgramEntityToJson(data as DjProgramEntity);
			case DjProgramPrograms:
				return djProgramProgramsToJson(data as DjProgramPrograms);
			case DjProgramProgramsMainSong:
				return djProgramProgramsMainSongToJson(data as DjProgramProgramsMainSong);
			case DjProgramProgramsMainSongArtists:
				return djProgramProgramsMainSongArtistsToJson(data as DjProgramProgramsMainSongArtists);
			case DjProgramProgramsMainSongAlbum:
				return djProgramProgramsMainSongAlbumToJson(data as DjProgramProgramsMainSongAlbum);
			case DjProgramProgramsMainSongAlbumArtist:
				return djProgramProgramsMainSongAlbumArtistToJson(data as DjProgramProgramsMainSongAlbumArtist);
			case DjProgramProgramsMainSongAlbumArtists:
				return djProgramProgramsMainSongAlbumArtistsToJson(data as DjProgramProgramsMainSongAlbumArtists);
			case DjProgramProgramsMainSongBMusic:
				return djProgramProgramsMainSongBMusicToJson(data as DjProgramProgramsMainSongBMusic);
			case DjProgramProgramsMainSongHMusic:
				return djProgramProgramsMainSongHMusicToJson(data as DjProgramProgramsMainSongHMusic);
			case DjProgramProgramsMainSongLMusic:
				return djProgramProgramsMainSongLMusicToJson(data as DjProgramProgramsMainSongLMusic);
			case DjProgramProgramsDj:
				return djProgramProgramsDjToJson(data as DjProgramProgramsDj);
			case DjProgramProgramsRadio:
				return djProgramProgramsRadioToJson(data as DjProgramProgramsRadio);
			case SearchSongListEntity:
				return searchSongListEntityToJson(data as SearchSongListEntity);
			case SearchSongListResult:
				return searchSongListResultToJson(data as SearchSongListResult);
			case SearchSongListResultPlaylists:
				return searchSongListResultPlaylistsToJson(data as SearchSongListResultPlaylists);
			case SearchSongListResultPlaylistsCreator:
				return searchSongListResultPlaylistsCreatorToJson(data as SearchSongListResultPlaylistsCreator);
			case SearchSongListResultPlaylistsTrack:
				return searchSongListResultPlaylistsTrackToJson(data as SearchSongListResultPlaylistsTrack);
			case SearchSongListResultPlaylistsTrackArtists:
				return searchSongListResultPlaylistsTrackArtistsToJson(data as SearchSongListResultPlaylistsTrackArtists);
			case SearchSongListResultPlaylistsTrackAlbum:
				return searchSongListResultPlaylistsTrackAlbumToJson(data as SearchSongListResultPlaylistsTrackAlbum);
			case SearchSongListResultPlaylistsTrackAlbumArtist:
				return searchSongListResultPlaylistsTrackAlbumArtistToJson(data as SearchSongListResultPlaylistsTrackAlbumArtist);
			case SearchSongListResultPlaylistsTrackAlbumArtists:
				return searchSongListResultPlaylistsTrackAlbumArtistsToJson(data as SearchSongListResultPlaylistsTrackAlbumArtists);
			case SearchSongListResultPlaylistsTrackHMusic:
				return searchSongListResultPlaylistsTrackHMusicToJson(data as SearchSongListResultPlaylistsTrackHMusic);
			case SearchSongListResultPlaylistsTrackMMusic:
				return searchSongListResultPlaylistsTrackMMusicToJson(data as SearchSongListResultPlaylistsTrackMMusic);
			case SearchSongListResultPlaylistsTrackLMusic:
				return searchSongListResultPlaylistsTrackLMusicToJson(data as SearchSongListResultPlaylistsTrackLMusic);
			case SearchSongListResultPlaylistsTrackBMusic:
				return searchSongListResultPlaylistsTrackBMusicToJson(data as SearchSongListResultPlaylistsTrackBMusic);
			case FineListResponseEntity:
				return fineListResponseEntityToJson(data as FineListResponseEntity);
			case FineListResponsePlaylists:
				return fineListResponsePlaylistsToJson(data as FineListResponsePlaylists);
			case FineListResponsePlaylistsCreator:
				return fineListResponsePlaylistsCreatorToJson(data as FineListResponsePlaylistsCreator);
			case FineListResponsePlaylistsCreatorAvatarDetail:
				return fineListResponsePlaylistsCreatorAvatarDetailToJson(data as FineListResponsePlaylistsCreatorAvatarDetail);
			case FineListResponsePlaylistsSubscribers:
				return fineListResponsePlaylistsSubscribersToJson(data as FineListResponsePlaylistsSubscribers);
			case PersonalizedPrivatecontentEntity:
				return personalizedPrivatecontentEntityToJson(data as PersonalizedPrivatecontentEntity);
			case PersonalizedPrivatecontentResult:
				return personalizedPrivatecontentResultToJson(data as PersonalizedPrivatecontentResult);
			case FineSongListResponseEntity:
				return fineSongListResponseEntityToJson(data as FineSongListResponseEntity);
			case FineSongListResponsePlaylists:
				return fineSongListResponsePlaylistsToJson(data as FineSongListResponsePlaylists);
			case FineSongListResponsePlaylistsCreator:
				return fineSongListResponsePlaylistsCreatorToJson(data as FineSongListResponsePlaylistsCreator);
			case FineSongListResponsePlaylistsCreatorAvatarDetail:
				return fineSongListResponsePlaylistsCreatorAvatarDetailToJson(data as FineSongListResponsePlaylistsCreatorAvatarDetail);
			case FineSongListResponsePlaylistsSubscribers:
				return fineSongListResponsePlaylistsSubscribersToJson(data as FineSongListResponsePlaylistsSubscribers);
			case DjHotEntity:
				return djHotEntityToJson(data as DjHotEntity);
			case DjHotDjRadios:
				return djHotDjRadiosToJson(data as DjHotDjRadios);
			case DjHotDjRadiosDj:
				return djHotDjRadiosDjToJson(data as DjHotDjRadiosDj);
			case DjDetailEntity:
				return djDetailEntityToJson(data as DjDetailEntity);
			case DjDetailData:
				return djDetailDataToJson(data as DjDetailData);
			case DjDetailDataDj:
				return djDetailDataDjToJson(data as DjDetailDataDj);
			case DjDetailDataCommentDatas:
				return djDetailDataCommentDatasToJson(data as DjDetailDataCommentDatas);
			case DjDetailDataCommentDatasUserProfile:
				return djDetailDataCommentDatasUserProfileToJson(data as DjDetailDataCommentDatasUserProfile);
			case TopMvEntity:
				return topMvEntityToJson(data as TopMvEntity);
			case TopMvData:
				return topMvDataToJson(data as TopMvData);
			case TopMvDataMv:
				return topMvDataMvToJson(data as TopMvDataMv);
			case TopMvDataMvArtists:
				return topMvDataMvArtistsToJson(data as TopMvDataMvArtists);
			case TopMvDataMvVideos:
				return topMvDataMvVideosToJson(data as TopMvDataMvVideos);
			case TopMvDataMvVideosTagSign:
				return topMvDataMvVideosTagSignToJson(data as TopMvDataMvVideosTagSign);
			case TopMvDataArtists:
				return topMvDataArtistsToJson(data as TopMvDataArtists);
			case SearchEntity:
				return searchEntityToJson(data as SearchEntity);
			case SearchResult:
				return searchResultToJson(data as SearchResult);
			case SearchResultSongs:
				return searchResultSongsToJson(data as SearchResultSongs);
			case SearchResultSongsArtists:
				return searchResultSongsArtistsToJson(data as SearchResultSongsArtists);
			case SearchResultSongsAlbum:
				return searchResultSongsAlbumToJson(data as SearchResultSongsAlbum);
			case SearchResultSongsAlbumArtist:
				return searchResultSongsAlbumArtistToJson(data as SearchResultSongsAlbumArtist);
			case PlaylistDetailResponseEntity:
				return playlistDetailResponseEntityToJson(data as PlaylistDetailResponseEntity);
			case PlaylistDetailResponsePlaylist:
				return playlistDetailResponsePlaylistToJson(data as PlaylistDetailResponsePlaylist);
			case PlaylistDetailResponsePlaylistSubscribers:
				return playlistDetailResponsePlaylistSubscribersToJson(data as PlaylistDetailResponsePlaylistSubscribers);
			case PlaylistDetailResponsePlaylistCreator:
				return playlistDetailResponsePlaylistCreatorToJson(data as PlaylistDetailResponsePlaylistCreator);
			case PlaylistDetailResponsePlaylistCreatorAvatarDetail:
				return playlistDetailResponsePlaylistCreatorAvatarDetailToJson(data as PlaylistDetailResponsePlaylistCreatorAvatarDetail);
			case PlaylistDetailResponsePlaylistTracks:
				return playlistDetailResponsePlaylistTracksToJson(data as PlaylistDetailResponsePlaylistTracks);
			case PlaylistDetailResponsePlaylistTracksAr:
				return playlistDetailResponsePlaylistTracksArToJson(data as PlaylistDetailResponsePlaylistTracksAr);
			case PlaylistDetailResponsePlaylistTracksAl:
				return playlistDetailResponsePlaylistTracksAlToJson(data as PlaylistDetailResponsePlaylistTracksAl);
			case PlaylistDetailResponsePlaylistTracksH:
				return playlistDetailResponsePlaylistTracksHToJson(data as PlaylistDetailResponsePlaylistTracksH);
			case PlaylistDetailResponsePlaylistTracksM:
				return playlistDetailResponsePlaylistTracksMToJson(data as PlaylistDetailResponsePlaylistTracksM);
			case PlaylistDetailResponsePlaylistTracksL:
				return playlistDetailResponsePlaylistTracksLToJson(data as PlaylistDetailResponsePlaylistTracksL);
			case PlaylistDetailResponsePlaylistTrackIds:
				return playlistDetailResponsePlaylistTrackIdsToJson(data as PlaylistDetailResponsePlaylistTrackIds);
			case PlaylistDetailResponsePrivileges:
				return playlistDetailResponsePrivilegesToJson(data as PlaylistDetailResponsePrivileges);
			case PlaylistDetailResponsePrivilegesFreeTrialPrivilege:
				return playlistDetailResponsePrivilegesFreeTrialPrivilegeToJson(data as PlaylistDetailResponsePrivilegesFreeTrialPrivilege);
			case PlaylistDetailResponsePrivilegesChargeInfoList:
				return playlistDetailResponsePrivilegesChargeInfoListToJson(data as PlaylistDetailResponsePrivilegesChargeInfoList);
			case MvUrlEntity:
				return mvUrlEntityToJson(data as MvUrlEntity);
			case MvUrlData:
				return mvUrlDataToJson(data as MvUrlData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (SongListResEntity).toString()){
			return SongListResEntity().fromJson(json);
		}
		if(type == (SongListResPlaylists).toString()){
			return SongListResPlaylists().fromJson(json);
		}
		if(type == (SongListResPlaylistsCreator).toString()){
			return SongListResPlaylistsCreator().fromJson(json);
		}
		if(type == (SongListResPlaylistsCreatorAvatarDetail).toString()){
			return SongListResPlaylistsCreatorAvatarDetail().fromJson(json);
		}
		if(type == (SongListResPlaylistsSubscribers).toString()){
			return SongListResPlaylistsSubscribers().fromJson(json);
		}
		if(type == (PersonalizedResponseEntity).toString()){
			return PersonalizedResponseEntity().fromJson(json);
		}
		if(type == (PersonalizedResponseResult).toString()){
			return PersonalizedResponseResult().fromJson(json);
		}
		if(type == (PersonalizedNewsongEntity).toString()){
			return PersonalizedNewsongEntity().fromJson(json);
		}
		if(type == (PersonalizedNewsongResult).toString()){
			return PersonalizedNewsongResult().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSong).toString()){
			return PersonalizedNewsongResultSong().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongArtists).toString()){
			return PersonalizedNewsongResultSongArtists().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongAlbum).toString()){
			return PersonalizedNewsongResultSongAlbum().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongAlbumArtist).toString()){
			return PersonalizedNewsongResultSongAlbumArtist().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongAlbumArtists).toString()){
			return PersonalizedNewsongResultSongAlbumArtists().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongBMusic).toString()){
			return PersonalizedNewsongResultSongBMusic().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongHMusic).toString()){
			return PersonalizedNewsongResultSongHMusic().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongMMusic).toString()){
			return PersonalizedNewsongResultSongMMusic().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongLMusic).toString()){
			return PersonalizedNewsongResultSongLMusic().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongPrivilege).toString()){
			return PersonalizedNewsongResultSongPrivilege().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege).toString()){
			return PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege().fromJson(json);
		}
		if(type == (PersonalizedNewsongResultSongPrivilegeChargeInfoList).toString()){
			return PersonalizedNewsongResultSongPrivilegeChargeInfoList().fromJson(json);
		}
		if(type == (MvDetailEntity).toString()){
			return MvDetailEntity().fromJson(json);
		}
		if(type == (MvDetailMp).toString()){
			return MvDetailMp().fromJson(json);
		}
		if(type == (MvDetailData).toString()){
			return MvDetailData().fromJson(json);
		}
		if(type == (MvDetailDataBrs).toString()){
			return MvDetailDataBrs().fromJson(json);
		}
		if(type == (MvDetailDataArtists).toString()){
			return MvDetailDataArtists().fromJson(json);
		}
		if(type == (TagResponseEntity).toString()){
			return TagResponseEntity().fromJson(json);
		}
		if(type == (TagResponseTags).toString()){
			return TagResponseTags().fromJson(json);
		}
		if(type == (TagResponseTagsPlaylistTag).toString()){
			return TagResponseTagsPlaylistTag().fromJson(json);
		}
		if(type == (DjProgramEntity).toString()){
			return DjProgramEntity().fromJson(json);
		}
		if(type == (DjProgramPrograms).toString()){
			return DjProgramPrograms().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSong).toString()){
			return DjProgramProgramsMainSong().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSongArtists).toString()){
			return DjProgramProgramsMainSongArtists().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSongAlbum).toString()){
			return DjProgramProgramsMainSongAlbum().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSongAlbumArtist).toString()){
			return DjProgramProgramsMainSongAlbumArtist().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSongAlbumArtists).toString()){
			return DjProgramProgramsMainSongAlbumArtists().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSongBMusic).toString()){
			return DjProgramProgramsMainSongBMusic().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSongHMusic).toString()){
			return DjProgramProgramsMainSongHMusic().fromJson(json);
		}
		if(type == (DjProgramProgramsMainSongLMusic).toString()){
			return DjProgramProgramsMainSongLMusic().fromJson(json);
		}
		if(type == (DjProgramProgramsDj).toString()){
			return DjProgramProgramsDj().fromJson(json);
		}
		if(type == (DjProgramProgramsRadio).toString()){
			return DjProgramProgramsRadio().fromJson(json);
		}
		if(type == (SearchSongListEntity).toString()){
			return SearchSongListEntity().fromJson(json);
		}
		if(type == (SearchSongListResult).toString()){
			return SearchSongListResult().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylists).toString()){
			return SearchSongListResultPlaylists().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsCreator).toString()){
			return SearchSongListResultPlaylistsCreator().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrack).toString()){
			return SearchSongListResultPlaylistsTrack().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackArtists).toString()){
			return SearchSongListResultPlaylistsTrackArtists().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackAlbum).toString()){
			return SearchSongListResultPlaylistsTrackAlbum().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackAlbumArtist).toString()){
			return SearchSongListResultPlaylistsTrackAlbumArtist().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackAlbumArtists).toString()){
			return SearchSongListResultPlaylistsTrackAlbumArtists().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackHMusic).toString()){
			return SearchSongListResultPlaylistsTrackHMusic().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackMMusic).toString()){
			return SearchSongListResultPlaylistsTrackMMusic().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackLMusic).toString()){
			return SearchSongListResultPlaylistsTrackLMusic().fromJson(json);
		}
		if(type == (SearchSongListResultPlaylistsTrackBMusic).toString()){
			return SearchSongListResultPlaylistsTrackBMusic().fromJson(json);
		}
		if(type == (FineListResponseEntity).toString()){
			return FineListResponseEntity().fromJson(json);
		}
		if(type == (FineListResponsePlaylists).toString()){
			return FineListResponsePlaylists().fromJson(json);
		}
		if(type == (FineListResponsePlaylistsCreator).toString()){
			return FineListResponsePlaylistsCreator().fromJson(json);
		}
		if(type == (FineListResponsePlaylistsCreatorAvatarDetail).toString()){
			return FineListResponsePlaylistsCreatorAvatarDetail().fromJson(json);
		}
		if(type == (FineListResponsePlaylistsSubscribers).toString()){
			return FineListResponsePlaylistsSubscribers().fromJson(json);
		}
		if(type == (PersonalizedPrivatecontentEntity).toString()){
			return PersonalizedPrivatecontentEntity().fromJson(json);
		}
		if(type == (PersonalizedPrivatecontentResult).toString()){
			return PersonalizedPrivatecontentResult().fromJson(json);
		}
		if(type == (FineSongListResponseEntity).toString()){
			return FineSongListResponseEntity().fromJson(json);
		}
		if(type == (FineSongListResponsePlaylists).toString()){
			return FineSongListResponsePlaylists().fromJson(json);
		}
		if(type == (FineSongListResponsePlaylistsCreator).toString()){
			return FineSongListResponsePlaylistsCreator().fromJson(json);
		}
		if(type == (FineSongListResponsePlaylistsCreatorAvatarDetail).toString()){
			return FineSongListResponsePlaylistsCreatorAvatarDetail().fromJson(json);
		}
		if(type == (FineSongListResponsePlaylistsSubscribers).toString()){
			return FineSongListResponsePlaylistsSubscribers().fromJson(json);
		}
		if(type == (DjHotEntity).toString()){
			return DjHotEntity().fromJson(json);
		}
		if(type == (DjHotDjRadios).toString()){
			return DjHotDjRadios().fromJson(json);
		}
		if(type == (DjHotDjRadiosDj).toString()){
			return DjHotDjRadiosDj().fromJson(json);
		}
		if(type == (DjDetailEntity).toString()){
			return DjDetailEntity().fromJson(json);
		}
		if(type == (DjDetailData).toString()){
			return DjDetailData().fromJson(json);
		}
		if(type == (DjDetailDataDj).toString()){
			return DjDetailDataDj().fromJson(json);
		}
		if(type == (DjDetailDataCommentDatas).toString()){
			return DjDetailDataCommentDatas().fromJson(json);
		}
		if(type == (DjDetailDataCommentDatasUserProfile).toString()){
			return DjDetailDataCommentDatasUserProfile().fromJson(json);
		}
		if(type == (TopMvEntity).toString()){
			return TopMvEntity().fromJson(json);
		}
		if(type == (TopMvData).toString()){
			return TopMvData().fromJson(json);
		}
		if(type == (TopMvDataMv).toString()){
			return TopMvDataMv().fromJson(json);
		}
		if(type == (TopMvDataMvArtists).toString()){
			return TopMvDataMvArtists().fromJson(json);
		}
		if(type == (TopMvDataMvVideos).toString()){
			return TopMvDataMvVideos().fromJson(json);
		}
		if(type == (TopMvDataMvVideosTagSign).toString()){
			return TopMvDataMvVideosTagSign().fromJson(json);
		}
		if(type == (TopMvDataArtists).toString()){
			return TopMvDataArtists().fromJson(json);
		}
		if(type == (SearchEntity).toString()){
			return SearchEntity().fromJson(json);
		}
		if(type == (SearchResult).toString()){
			return SearchResult().fromJson(json);
		}
		if(type == (SearchResultSongs).toString()){
			return SearchResultSongs().fromJson(json);
		}
		if(type == (SearchResultSongsArtists).toString()){
			return SearchResultSongsArtists().fromJson(json);
		}
		if(type == (SearchResultSongsAlbum).toString()){
			return SearchResultSongsAlbum().fromJson(json);
		}
		if(type == (SearchResultSongsAlbumArtist).toString()){
			return SearchResultSongsAlbumArtist().fromJson(json);
		}
		if(type == (PlaylistDetailResponseEntity).toString()){
			return PlaylistDetailResponseEntity().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylist).toString()){
			return PlaylistDetailResponsePlaylist().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistSubscribers).toString()){
			return PlaylistDetailResponsePlaylistSubscribers().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistCreator).toString()){
			return PlaylistDetailResponsePlaylistCreator().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistCreatorAvatarDetail).toString()){
			return PlaylistDetailResponsePlaylistCreatorAvatarDetail().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracks).toString()){
			return PlaylistDetailResponsePlaylistTracks().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksAr).toString()){
			return PlaylistDetailResponsePlaylistTracksAr().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksAl).toString()){
			return PlaylistDetailResponsePlaylistTracksAl().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksH).toString()){
			return PlaylistDetailResponsePlaylistTracksH().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksM).toString()){
			return PlaylistDetailResponsePlaylistTracksM().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksL).toString()){
			return PlaylistDetailResponsePlaylistTracksL().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTrackIds).toString()){
			return PlaylistDetailResponsePlaylistTrackIds().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePrivileges).toString()){
			return PlaylistDetailResponsePrivileges().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePrivilegesFreeTrialPrivilege).toString()){
			return PlaylistDetailResponsePrivilegesFreeTrialPrivilege().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePrivilegesChargeInfoList).toString()){
			return PlaylistDetailResponsePrivilegesChargeInfoList().fromJson(json);
		}
		if(type == (MvUrlEntity).toString()){
			return MvUrlEntity().fromJson(json);
		}
		if(type == (MvUrlData).toString()){
			return MvUrlData().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<SongListResEntity>[] is M){
			return data.map<SongListResEntity>((e) => SongListResEntity().fromJson(e)).toList() as M;
		}
		if(<SongListResPlaylists>[] is M){
			return data.map<SongListResPlaylists>((e) => SongListResPlaylists().fromJson(e)).toList() as M;
		}
		if(<SongListResPlaylistsCreator>[] is M){
			return data.map<SongListResPlaylistsCreator>((e) => SongListResPlaylistsCreator().fromJson(e)).toList() as M;
		}
		if(<SongListResPlaylistsCreatorAvatarDetail>[] is M){
			return data.map<SongListResPlaylistsCreatorAvatarDetail>((e) => SongListResPlaylistsCreatorAvatarDetail().fromJson(e)).toList() as M;
		}
		if(<SongListResPlaylistsSubscribers>[] is M){
			return data.map<SongListResPlaylistsSubscribers>((e) => SongListResPlaylistsSubscribers().fromJson(e)).toList() as M;
		}
		if(<PersonalizedResponseEntity>[] is M){
			return data.map<PersonalizedResponseEntity>((e) => PersonalizedResponseEntity().fromJson(e)).toList() as M;
		}
		if(<PersonalizedResponseResult>[] is M){
			return data.map<PersonalizedResponseResult>((e) => PersonalizedResponseResult().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongEntity>[] is M){
			return data.map<PersonalizedNewsongEntity>((e) => PersonalizedNewsongEntity().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResult>[] is M){
			return data.map<PersonalizedNewsongResult>((e) => PersonalizedNewsongResult().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSong>[] is M){
			return data.map<PersonalizedNewsongResultSong>((e) => PersonalizedNewsongResultSong().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongArtists>[] is M){
			return data.map<PersonalizedNewsongResultSongArtists>((e) => PersonalizedNewsongResultSongArtists().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongAlbum>[] is M){
			return data.map<PersonalizedNewsongResultSongAlbum>((e) => PersonalizedNewsongResultSongAlbum().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongAlbumArtist>[] is M){
			return data.map<PersonalizedNewsongResultSongAlbumArtist>((e) => PersonalizedNewsongResultSongAlbumArtist().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongAlbumArtists>[] is M){
			return data.map<PersonalizedNewsongResultSongAlbumArtists>((e) => PersonalizedNewsongResultSongAlbumArtists().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongBMusic>[] is M){
			return data.map<PersonalizedNewsongResultSongBMusic>((e) => PersonalizedNewsongResultSongBMusic().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongHMusic>[] is M){
			return data.map<PersonalizedNewsongResultSongHMusic>((e) => PersonalizedNewsongResultSongHMusic().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongMMusic>[] is M){
			return data.map<PersonalizedNewsongResultSongMMusic>((e) => PersonalizedNewsongResultSongMMusic().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongLMusic>[] is M){
			return data.map<PersonalizedNewsongResultSongLMusic>((e) => PersonalizedNewsongResultSongLMusic().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongPrivilege>[] is M){
			return data.map<PersonalizedNewsongResultSongPrivilege>((e) => PersonalizedNewsongResultSongPrivilege().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege>[] is M){
			return data.map<PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege>((e) => PersonalizedNewsongResultSongPrivilegeFreeTrialPrivilege().fromJson(e)).toList() as M;
		}
		if(<PersonalizedNewsongResultSongPrivilegeChargeInfoList>[] is M){
			return data.map<PersonalizedNewsongResultSongPrivilegeChargeInfoList>((e) => PersonalizedNewsongResultSongPrivilegeChargeInfoList().fromJson(e)).toList() as M;
		}
		if(<MvDetailEntity>[] is M){
			return data.map<MvDetailEntity>((e) => MvDetailEntity().fromJson(e)).toList() as M;
		}
		if(<MvDetailMp>[] is M){
			return data.map<MvDetailMp>((e) => MvDetailMp().fromJson(e)).toList() as M;
		}
		if(<MvDetailData>[] is M){
			return data.map<MvDetailData>((e) => MvDetailData().fromJson(e)).toList() as M;
		}
		if(<MvDetailDataBrs>[] is M){
			return data.map<MvDetailDataBrs>((e) => MvDetailDataBrs().fromJson(e)).toList() as M;
		}
		if(<MvDetailDataArtists>[] is M){
			return data.map<MvDetailDataArtists>((e) => MvDetailDataArtists().fromJson(e)).toList() as M;
		}
		if(<TagResponseEntity>[] is M){
			return data.map<TagResponseEntity>((e) => TagResponseEntity().fromJson(e)).toList() as M;
		}
		if(<TagResponseTags>[] is M){
			return data.map<TagResponseTags>((e) => TagResponseTags().fromJson(e)).toList() as M;
		}
		if(<TagResponseTagsPlaylistTag>[] is M){
			return data.map<TagResponseTagsPlaylistTag>((e) => TagResponseTagsPlaylistTag().fromJson(e)).toList() as M;
		}
		if(<DjProgramEntity>[] is M){
			return data.map<DjProgramEntity>((e) => DjProgramEntity().fromJson(e)).toList() as M;
		}
		if(<DjProgramPrograms>[] is M){
			return data.map<DjProgramPrograms>((e) => DjProgramPrograms().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSong>[] is M){
			return data.map<DjProgramProgramsMainSong>((e) => DjProgramProgramsMainSong().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSongArtists>[] is M){
			return data.map<DjProgramProgramsMainSongArtists>((e) => DjProgramProgramsMainSongArtists().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSongAlbum>[] is M){
			return data.map<DjProgramProgramsMainSongAlbum>((e) => DjProgramProgramsMainSongAlbum().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSongAlbumArtist>[] is M){
			return data.map<DjProgramProgramsMainSongAlbumArtist>((e) => DjProgramProgramsMainSongAlbumArtist().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSongAlbumArtists>[] is M){
			return data.map<DjProgramProgramsMainSongAlbumArtists>((e) => DjProgramProgramsMainSongAlbumArtists().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSongBMusic>[] is M){
			return data.map<DjProgramProgramsMainSongBMusic>((e) => DjProgramProgramsMainSongBMusic().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSongHMusic>[] is M){
			return data.map<DjProgramProgramsMainSongHMusic>((e) => DjProgramProgramsMainSongHMusic().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsMainSongLMusic>[] is M){
			return data.map<DjProgramProgramsMainSongLMusic>((e) => DjProgramProgramsMainSongLMusic().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsDj>[] is M){
			return data.map<DjProgramProgramsDj>((e) => DjProgramProgramsDj().fromJson(e)).toList() as M;
		}
		if(<DjProgramProgramsRadio>[] is M){
			return data.map<DjProgramProgramsRadio>((e) => DjProgramProgramsRadio().fromJson(e)).toList() as M;
		}
		if(<SearchSongListEntity>[] is M){
			return data.map<SearchSongListEntity>((e) => SearchSongListEntity().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResult>[] is M){
			return data.map<SearchSongListResult>((e) => SearchSongListResult().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylists>[] is M){
			return data.map<SearchSongListResultPlaylists>((e) => SearchSongListResultPlaylists().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsCreator>[] is M){
			return data.map<SearchSongListResultPlaylistsCreator>((e) => SearchSongListResultPlaylistsCreator().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrack>[] is M){
			return data.map<SearchSongListResultPlaylistsTrack>((e) => SearchSongListResultPlaylistsTrack().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackArtists>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackArtists>((e) => SearchSongListResultPlaylistsTrackArtists().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackAlbum>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackAlbum>((e) => SearchSongListResultPlaylistsTrackAlbum().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackAlbumArtist>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackAlbumArtist>((e) => SearchSongListResultPlaylistsTrackAlbumArtist().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackAlbumArtists>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackAlbumArtists>((e) => SearchSongListResultPlaylistsTrackAlbumArtists().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackHMusic>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackHMusic>((e) => SearchSongListResultPlaylistsTrackHMusic().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackMMusic>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackMMusic>((e) => SearchSongListResultPlaylistsTrackMMusic().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackLMusic>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackLMusic>((e) => SearchSongListResultPlaylistsTrackLMusic().fromJson(e)).toList() as M;
		}
		if(<SearchSongListResultPlaylistsTrackBMusic>[] is M){
			return data.map<SearchSongListResultPlaylistsTrackBMusic>((e) => SearchSongListResultPlaylistsTrackBMusic().fromJson(e)).toList() as M;
		}
		if(<FineListResponseEntity>[] is M){
			return data.map<FineListResponseEntity>((e) => FineListResponseEntity().fromJson(e)).toList() as M;
		}
		if(<FineListResponsePlaylists>[] is M){
			return data.map<FineListResponsePlaylists>((e) => FineListResponsePlaylists().fromJson(e)).toList() as M;
		}
		if(<FineListResponsePlaylistsCreator>[] is M){
			return data.map<FineListResponsePlaylistsCreator>((e) => FineListResponsePlaylistsCreator().fromJson(e)).toList() as M;
		}
		if(<FineListResponsePlaylistsCreatorAvatarDetail>[] is M){
			return data.map<FineListResponsePlaylistsCreatorAvatarDetail>((e) => FineListResponsePlaylistsCreatorAvatarDetail().fromJson(e)).toList() as M;
		}
		if(<FineListResponsePlaylistsSubscribers>[] is M){
			return data.map<FineListResponsePlaylistsSubscribers>((e) => FineListResponsePlaylistsSubscribers().fromJson(e)).toList() as M;
		}
		if(<PersonalizedPrivatecontentEntity>[] is M){
			return data.map<PersonalizedPrivatecontentEntity>((e) => PersonalizedPrivatecontentEntity().fromJson(e)).toList() as M;
		}
		if(<PersonalizedPrivatecontentResult>[] is M){
			return data.map<PersonalizedPrivatecontentResult>((e) => PersonalizedPrivatecontentResult().fromJson(e)).toList() as M;
		}
		if(<FineSongListResponseEntity>[] is M){
			return data.map<FineSongListResponseEntity>((e) => FineSongListResponseEntity().fromJson(e)).toList() as M;
		}
		if(<FineSongListResponsePlaylists>[] is M){
			return data.map<FineSongListResponsePlaylists>((e) => FineSongListResponsePlaylists().fromJson(e)).toList() as M;
		}
		if(<FineSongListResponsePlaylistsCreator>[] is M){
			return data.map<FineSongListResponsePlaylistsCreator>((e) => FineSongListResponsePlaylistsCreator().fromJson(e)).toList() as M;
		}
		if(<FineSongListResponsePlaylistsCreatorAvatarDetail>[] is M){
			return data.map<FineSongListResponsePlaylistsCreatorAvatarDetail>((e) => FineSongListResponsePlaylistsCreatorAvatarDetail().fromJson(e)).toList() as M;
		}
		if(<FineSongListResponsePlaylistsSubscribers>[] is M){
			return data.map<FineSongListResponsePlaylistsSubscribers>((e) => FineSongListResponsePlaylistsSubscribers().fromJson(e)).toList() as M;
		}
		if(<DjHotEntity>[] is M){
			return data.map<DjHotEntity>((e) => DjHotEntity().fromJson(e)).toList() as M;
		}
		if(<DjHotDjRadios>[] is M){
			return data.map<DjHotDjRadios>((e) => DjHotDjRadios().fromJson(e)).toList() as M;
		}
		if(<DjHotDjRadiosDj>[] is M){
			return data.map<DjHotDjRadiosDj>((e) => DjHotDjRadiosDj().fromJson(e)).toList() as M;
		}
		if(<DjDetailEntity>[] is M){
			return data.map<DjDetailEntity>((e) => DjDetailEntity().fromJson(e)).toList() as M;
		}
		if(<DjDetailData>[] is M){
			return data.map<DjDetailData>((e) => DjDetailData().fromJson(e)).toList() as M;
		}
		if(<DjDetailDataDj>[] is M){
			return data.map<DjDetailDataDj>((e) => DjDetailDataDj().fromJson(e)).toList() as M;
		}
		if(<DjDetailDataCommentDatas>[] is M){
			return data.map<DjDetailDataCommentDatas>((e) => DjDetailDataCommentDatas().fromJson(e)).toList() as M;
		}
		if(<DjDetailDataCommentDatasUserProfile>[] is M){
			return data.map<DjDetailDataCommentDatasUserProfile>((e) => DjDetailDataCommentDatasUserProfile().fromJson(e)).toList() as M;
		}
		if(<TopMvEntity>[] is M){
			return data.map<TopMvEntity>((e) => TopMvEntity().fromJson(e)).toList() as M;
		}
		if(<TopMvData>[] is M){
			return data.map<TopMvData>((e) => TopMvData().fromJson(e)).toList() as M;
		}
		if(<TopMvDataMv>[] is M){
			return data.map<TopMvDataMv>((e) => TopMvDataMv().fromJson(e)).toList() as M;
		}
		if(<TopMvDataMvArtists>[] is M){
			return data.map<TopMvDataMvArtists>((e) => TopMvDataMvArtists().fromJson(e)).toList() as M;
		}
		if(<TopMvDataMvVideos>[] is M){
			return data.map<TopMvDataMvVideos>((e) => TopMvDataMvVideos().fromJson(e)).toList() as M;
		}
		if(<TopMvDataMvVideosTagSign>[] is M){
			return data.map<TopMvDataMvVideosTagSign>((e) => TopMvDataMvVideosTagSign().fromJson(e)).toList() as M;
		}
		if(<TopMvDataArtists>[] is M){
			return data.map<TopMvDataArtists>((e) => TopMvDataArtists().fromJson(e)).toList() as M;
		}
		if(<SearchEntity>[] is M){
			return data.map<SearchEntity>((e) => SearchEntity().fromJson(e)).toList() as M;
		}
		if(<SearchResult>[] is M){
			return data.map<SearchResult>((e) => SearchResult().fromJson(e)).toList() as M;
		}
		if(<SearchResultSongs>[] is M){
			return data.map<SearchResultSongs>((e) => SearchResultSongs().fromJson(e)).toList() as M;
		}
		if(<SearchResultSongsArtists>[] is M){
			return data.map<SearchResultSongsArtists>((e) => SearchResultSongsArtists().fromJson(e)).toList() as M;
		}
		if(<SearchResultSongsAlbum>[] is M){
			return data.map<SearchResultSongsAlbum>((e) => SearchResultSongsAlbum().fromJson(e)).toList() as M;
		}
		if(<SearchResultSongsAlbumArtist>[] is M){
			return data.map<SearchResultSongsAlbumArtist>((e) => SearchResultSongsAlbumArtist().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponseEntity>[] is M){
			return data.map<PlaylistDetailResponseEntity>((e) => PlaylistDetailResponseEntity().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylist>[] is M){
			return data.map<PlaylistDetailResponsePlaylist>((e) => PlaylistDetailResponsePlaylist().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistSubscribers>[] is M){
			return data.map<PlaylistDetailResponsePlaylistSubscribers>((e) => PlaylistDetailResponsePlaylistSubscribers().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistCreator>[] is M){
			return data.map<PlaylistDetailResponsePlaylistCreator>((e) => PlaylistDetailResponsePlaylistCreator().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistCreatorAvatarDetail>[] is M){
			return data.map<PlaylistDetailResponsePlaylistCreatorAvatarDetail>((e) => PlaylistDetailResponsePlaylistCreatorAvatarDetail().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracks>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracks>((e) => PlaylistDetailResponsePlaylistTracks().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksAr>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksAr>((e) => PlaylistDetailResponsePlaylistTracksAr().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksAl>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksAl>((e) => PlaylistDetailResponsePlaylistTracksAl().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksH>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksH>((e) => PlaylistDetailResponsePlaylistTracksH().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksM>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksM>((e) => PlaylistDetailResponsePlaylistTracksM().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksL>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksL>((e) => PlaylistDetailResponsePlaylistTracksL().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTrackIds>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTrackIds>((e) => PlaylistDetailResponsePlaylistTrackIds().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePrivileges>[] is M){
			return data.map<PlaylistDetailResponsePrivileges>((e) => PlaylistDetailResponsePrivileges().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePrivilegesFreeTrialPrivilege>[] is M){
			return data.map<PlaylistDetailResponsePrivilegesFreeTrialPrivilege>((e) => PlaylistDetailResponsePrivilegesFreeTrialPrivilege().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePrivilegesChargeInfoList>[] is M){
			return data.map<PlaylistDetailResponsePrivilegesChargeInfoList>((e) => PlaylistDetailResponsePrivilegesChargeInfoList().fromJson(e)).toList() as M;
		}
		if(<MvUrlEntity>[] is M){
			return data.map<MvUrlEntity>((e) => MvUrlEntity().fromJson(e)).toList() as M;
		}
		if(<MvUrlData>[] is M){
			return data.map<MvUrlData>((e) => MvUrlData().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}
