// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:music/models/automation/personalized_response_entity.dart';
import 'package:music/generated/json/personalized_response_entity_helper.dart';
import 'package:music/models/automation/playlistDetail_response_entity.dart';
import 'package:music/generated/json/playlistDetail_response_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case PersonalizedResponseEntity:
				return personalizedResponseEntityFromJson(data as PersonalizedResponseEntity, json) as T;
			case PersonalizedResponseResult:
				return personalizedResponseResultFromJson(data as PersonalizedResponseResult, json) as T;
			case PlaylistDetailResponseEntity:
				return playlistDetailResponseEntityFromJson(data as PlaylistDetailResponseEntity, json) as T;
			case PlaylistDetailResponsePlaylist:
				return playlistDetailResponsePlaylistFromJson(data as PlaylistDetailResponsePlaylist, json) as T;
			case PlaylistDetailResponsePlaylistSubscribers:
				return playlistDetailResponsePlaylistSubscribersFromJson(data as PlaylistDetailResponsePlaylistSubscribers, json) as T;
			case PlaylistDetailResponsePlaylistCreator:
				return playlistDetailResponsePlaylistCreatorFromJson(data as PlaylistDetailResponsePlaylistCreator, json) as T;
			case PlaylistDetailResponsePlaylistCreatorAvatarDetail:
				return playlistDetailResponsePlaylistCreatorAvatarDetailFromJson(data as PlaylistDetailResponsePlaylistCreatorAvatarDetail, json) as T;
			case PlaylistDetailResponsePlaylistTracks:
				return playlistDetailResponsePlaylistTracksFromJson(data as PlaylistDetailResponsePlaylistTracks, json) as T;
			case PlaylistDetailResponsePlaylistTracksAr:
				return playlistDetailResponsePlaylistTracksArFromJson(data as PlaylistDetailResponsePlaylistTracksAr, json) as T;
			case PlaylistDetailResponsePlaylistTracksAl:
				return playlistDetailResponsePlaylistTracksAlFromJson(data as PlaylistDetailResponsePlaylistTracksAl, json) as T;
			case PlaylistDetailResponsePlaylistTracksH:
				return playlistDetailResponsePlaylistTracksHFromJson(data as PlaylistDetailResponsePlaylistTracksH, json) as T;
			case PlaylistDetailResponsePlaylistTracksM:
				return playlistDetailResponsePlaylistTracksMFromJson(data as PlaylistDetailResponsePlaylistTracksM, json) as T;
			case PlaylistDetailResponsePlaylistTracksL:
				return playlistDetailResponsePlaylistTracksLFromJson(data as PlaylistDetailResponsePlaylistTracksL, json) as T;
			case PlaylistDetailResponsePlaylistTrackIds:
				return playlistDetailResponsePlaylistTrackIdsFromJson(data as PlaylistDetailResponsePlaylistTrackIds, json) as T;
			case PlaylistDetailResponsePrivileges:
				return playlistDetailResponsePrivilegesFromJson(data as PlaylistDetailResponsePrivileges, json) as T;
			case PlaylistDetailResponsePrivilegesFreeTrialPrivilege:
				return playlistDetailResponsePrivilegesFreeTrialPrivilegeFromJson(data as PlaylistDetailResponsePrivilegesFreeTrialPrivilege, json) as T;
			case PlaylistDetailResponsePrivilegesChargeInfoList:
				return playlistDetailResponsePrivilegesChargeInfoListFromJson(data as PlaylistDetailResponsePrivilegesChargeInfoList, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case PersonalizedResponseEntity:
				return personalizedResponseEntityToJson(data as PersonalizedResponseEntity);
			case PersonalizedResponseResult:
				return personalizedResponseResultToJson(data as PersonalizedResponseResult);
			case PlaylistDetailResponseEntity:
				return playlistDetailResponseEntityToJson(data as PlaylistDetailResponseEntity);
			case PlaylistDetailResponsePlaylist:
				return playlistDetailResponsePlaylistToJson(data as PlaylistDetailResponsePlaylist);
			case PlaylistDetailResponsePlaylistSubscribers:
				return playlistDetailResponsePlaylistSubscribersToJson(data as PlaylistDetailResponsePlaylistSubscribers);
			case PlaylistDetailResponsePlaylistCreator:
				return playlistDetailResponsePlaylistCreatorToJson(data as PlaylistDetailResponsePlaylistCreator);
			case PlaylistDetailResponsePlaylistCreatorAvatarDetail:
				return playlistDetailResponsePlaylistCreatorAvatarDetailToJson(data as PlaylistDetailResponsePlaylistCreatorAvatarDetail);
			case PlaylistDetailResponsePlaylistTracks:
				return playlistDetailResponsePlaylistTracksToJson(data as PlaylistDetailResponsePlaylistTracks);
			case PlaylistDetailResponsePlaylistTracksAr:
				return playlistDetailResponsePlaylistTracksArToJson(data as PlaylistDetailResponsePlaylistTracksAr);
			case PlaylistDetailResponsePlaylistTracksAl:
				return playlistDetailResponsePlaylistTracksAlToJson(data as PlaylistDetailResponsePlaylistTracksAl);
			case PlaylistDetailResponsePlaylistTracksH:
				return playlistDetailResponsePlaylistTracksHToJson(data as PlaylistDetailResponsePlaylistTracksH);
			case PlaylistDetailResponsePlaylistTracksM:
				return playlistDetailResponsePlaylistTracksMToJson(data as PlaylistDetailResponsePlaylistTracksM);
			case PlaylistDetailResponsePlaylistTracksL:
				return playlistDetailResponsePlaylistTracksLToJson(data as PlaylistDetailResponsePlaylistTracksL);
			case PlaylistDetailResponsePlaylistTrackIds:
				return playlistDetailResponsePlaylistTrackIdsToJson(data as PlaylistDetailResponsePlaylistTrackIds);
			case PlaylistDetailResponsePrivileges:
				return playlistDetailResponsePrivilegesToJson(data as PlaylistDetailResponsePrivileges);
			case PlaylistDetailResponsePrivilegesFreeTrialPrivilege:
				return playlistDetailResponsePrivilegesFreeTrialPrivilegeToJson(data as PlaylistDetailResponsePrivilegesFreeTrialPrivilege);
			case PlaylistDetailResponsePrivilegesChargeInfoList:
				return playlistDetailResponsePrivilegesChargeInfoListToJson(data as PlaylistDetailResponsePrivilegesChargeInfoList);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (PersonalizedResponseEntity).toString()){
			return PersonalizedResponseEntity().fromJson(json);
		}
		if(type == (PersonalizedResponseResult).toString()){
			return PersonalizedResponseResult().fromJson(json);
		}
		if(type == (PlaylistDetailResponseEntity).toString()){
			return PlaylistDetailResponseEntity().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylist).toString()){
			return PlaylistDetailResponsePlaylist().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistSubscribers).toString()){
			return PlaylistDetailResponsePlaylistSubscribers().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistCreator).toString()){
			return PlaylistDetailResponsePlaylistCreator().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistCreatorAvatarDetail).toString()){
			return PlaylistDetailResponsePlaylistCreatorAvatarDetail().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracks).toString()){
			return PlaylistDetailResponsePlaylistTracks().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksAr).toString()){
			return PlaylistDetailResponsePlaylistTracksAr().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksAl).toString()){
			return PlaylistDetailResponsePlaylistTracksAl().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksH).toString()){
			return PlaylistDetailResponsePlaylistTracksH().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksM).toString()){
			return PlaylistDetailResponsePlaylistTracksM().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTracksL).toString()){
			return PlaylistDetailResponsePlaylistTracksL().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePlaylistTrackIds).toString()){
			return PlaylistDetailResponsePlaylistTrackIds().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePrivileges).toString()){
			return PlaylistDetailResponsePrivileges().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePrivilegesFreeTrialPrivilege).toString()){
			return PlaylistDetailResponsePrivilegesFreeTrialPrivilege().fromJson(json);
		}
		if(type == (PlaylistDetailResponsePrivilegesChargeInfoList).toString()){
			return PlaylistDetailResponsePrivilegesChargeInfoList().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<PersonalizedResponseEntity>[] is M){
			return data.map<PersonalizedResponseEntity>((e) => PersonalizedResponseEntity().fromJson(e)).toList() as M;
		}
		if(<PersonalizedResponseResult>[] is M){
			return data.map<PersonalizedResponseResult>((e) => PersonalizedResponseResult().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponseEntity>[] is M){
			return data.map<PlaylistDetailResponseEntity>((e) => PlaylistDetailResponseEntity().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylist>[] is M){
			return data.map<PlaylistDetailResponsePlaylist>((e) => PlaylistDetailResponsePlaylist().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistSubscribers>[] is M){
			return data.map<PlaylistDetailResponsePlaylistSubscribers>((e) => PlaylistDetailResponsePlaylistSubscribers().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistCreator>[] is M){
			return data.map<PlaylistDetailResponsePlaylistCreator>((e) => PlaylistDetailResponsePlaylistCreator().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistCreatorAvatarDetail>[] is M){
			return data.map<PlaylistDetailResponsePlaylistCreatorAvatarDetail>((e) => PlaylistDetailResponsePlaylistCreatorAvatarDetail().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracks>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracks>((e) => PlaylistDetailResponsePlaylistTracks().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksAr>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksAr>((e) => PlaylistDetailResponsePlaylistTracksAr().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksAl>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksAl>((e) => PlaylistDetailResponsePlaylistTracksAl().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksH>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksH>((e) => PlaylistDetailResponsePlaylistTracksH().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksM>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksM>((e) => PlaylistDetailResponsePlaylistTracksM().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTracksL>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTracksL>((e) => PlaylistDetailResponsePlaylistTracksL().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePlaylistTrackIds>[] is M){
			return data.map<PlaylistDetailResponsePlaylistTrackIds>((e) => PlaylistDetailResponsePlaylistTrackIds().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePrivileges>[] is M){
			return data.map<PlaylistDetailResponsePrivileges>((e) => PlaylistDetailResponsePrivileges().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePrivilegesFreeTrialPrivilege>[] is M){
			return data.map<PlaylistDetailResponsePrivilegesFreeTrialPrivilege>((e) => PlaylistDetailResponsePrivilegesFreeTrialPrivilege().fromJson(e)).toList() as M;
		}
		if(<PlaylistDetailResponsePrivilegesChargeInfoList>[] is M){
			return data.map<PlaylistDetailResponsePrivilegesChargeInfoList>((e) => PlaylistDetailResponsePrivilegesChargeInfoList().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}
